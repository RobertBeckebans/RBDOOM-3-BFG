---
title: Script Events Class Diagram generated by RBDOOM 3 BFG 1.6.0
---
classDiagram
NULL <|-- idClass
class idClass{
	+remove(): void 

}

idClass <|-- idThread
class idThread{
	+terminate( parm0: int ): void 
	+pause(): void 
	+wait( parm0: float ): void 
	+waitFrame(): void 
	+waitFor( parm0: entity ): void 
	+waitForThread( parm0: int ): void 
	+print( parm0: string ): void 
	+println( parm0: string ): void 
	+say( parm0: string ): void 
	+assert( parm0: float ): void 
	+trigger( parm0: entity ): void 
	+setcvar( parm0: string, parm1: string ): void 
	+getcvar( parm0: string ): string 
	+random( parm0: float ): float 
	+randomInt( parm0: int ): float 
	+getTime(): float 
	+killthread( parm0: string ): void 
	+threadname( parm0: string ): void 
	+getEntity( parm0: string ): entity 
	+spawn( parm0: string ): entity 
	+copySpawnArgs( parm0: entity ): void 
	+setSpawnArg( parm0: string, parm1: string ): void 
	+SpawnString( parm0: string, parm1: string ): string 
	+SpawnFloat( parm0: string, parm1: float ): float 
	+SpawnVector( parm0: string, parm1: vector ): vector 
	+clearPersistantArgs(): void 
	+setPersistantArg( parm0: string, parm1: string ): void 
	+getPersistantString( parm0: string ): string 
	+getPersistantFloat( parm0: string ): float 
	+getPersistantVector( parm0: string ): vector 
	+angToForward( parm0: vector ): vector 
	+angToRight( parm0: vector ): vector 
	+angToUp( parm0: vector ): vector 
	+sin( parm0: float ): float 
	+cos( parm0: float ): float 
	+asin( parm0: float ): float 
	+acos( parm0: float ): float 
	+sqrt( parm0: float ): float 
	+vecNormalize( parm0: vector ): vector 
	+vecLength( parm0: vector ): float 
	+DotProduct( parm0: vector, parm1: vector ): float 
	+CrossProduct( parm0: vector, parm1: vector ): vector 
	+VecToAngles( parm0: vector ): vector 
	+VecToOrthoBasisAngles( parm0: vector ): vector 
	+rotateVector( parm0: vector, parm1: vector ): vector 
	+onSignal( parm0: int, parm1: entity, parm2: string ): void 
	+clearSignalThread( parm0: int, parm1: entity ): void 
	+setCamera( parm0: entity ): void 
	+firstPerson(): void 
	+trace( parm0: vector, parm1: vector, parm2: vector, parm3: vector, parm4: int, parm5: entity ): float 
	+tracePoint( parm0: vector, parm1: vector, parm2: int, parm3: entity ): float 
	+getTraceFraction(): float 
	+getTraceEndPos(): vector 
	+getTraceNormal(): vector 
	+getTraceEntity(): entity 
	+getTraceJoint(): string 
	+getTraceBody(): string 
	+fadeIn( parm0: vector, parm1: float ): void 
	+fadeOut( parm0: vector, parm1: float ): void 
	+fadeTo( parm0: vector, parm1: float, parm2: float ): void 
	+setShaderParm( parm0: int, parm1: float ): void 
	+music( parm0: string ): void 
	+warning( parm0: string ): void 
	+error( parm0: string ): void 
	+strLength( parm0: string ): float 
	+strLeft( parm0: string, parm1: int ): string 
	+strRight( parm0: string, parm1: int ): string 
	+strSkip( parm0: string, parm1: int ): string 
	+strMid( parm0: string, parm1: int, parm2: int ): string 
	+strToFloat( parm0: string ): float 
	+radiusDamage( parm0: vector, parm1: entity, parm2: entity, parm3: entity, parm4: string, parm5: float ): void 
	+isClient(): float 
	+isMultiplayer(): float 
	+getFrameTime(): float 
	+getTicsPerSecond(): float 
	+cacheSoundShader( parm0: string ): void 
	+debugLine( parm0: vector, parm1: vector, parm2: vector, parm3: float ): void 
	+debugArrow( parm0: vector, parm1: vector, parm2: vector, parm3: int, parm4: float ): void 
	+debugCircle( parm0: vector, parm1: vector, parm2: vector, parm3: float, parm4: int, parm5: float ): void 
	+debugBounds( parm0: vector, parm1: vector, parm2: vector, parm3: float ): void 
	+drawText( parm0: string, parm1: vector, parm2: float, parm3: vector, parm4: int, parm5: float ): void 
	+influenceActive(): float 

}

idClass <|-- idPhysics
idPhysics <|-- idPhysics_StaticMulti
idPhysics <|-- idPhysics_Static
idPhysics <|-- idPhysics_Base
idPhysics_Base <|-- idPhysics_RigidBody
idPhysics_Base <|-- idPhysics_Parametric
idPhysics_Base <|-- idPhysics_Actor
idPhysics_Actor <|-- idPhysics_Player
idPhysics_Actor <|-- idPhysics_Monster
idPhysics_Base <|-- idPhysics_AF
idClass <|-- idForce
idForce <|-- idForce_Spring
idForce <|-- idForce_Grab
idForce <|-- idForce_Field
idForce <|-- idForce_Drag
idForce <|-- idForce_Constant
idClass <|-- idEntity
class idEntity{
	+getName(): string 
	+setName( parm0: string ): void 
	+activateTargets( parm0: entity ): void 
	+numTargets(): float 
	+getTarget( parm0: float ): entity 
	+randomTarget( parm0: string ): entity 
	+bindToJoint( parm0: entity, parm1: string, parm2: float ): void 
	+removeBinds(): void 
	+bind( parm0: entity ): void 
	+bindPosition( parm0: entity ): void 
	+unbind(): void 
	+setOwner( parm0: entity ): void 
	+setModel( parm0: string ): void 
	+setSkin( parm0: string ): void 
	+getShaderParm( parm0: int ): float 
	+setShaderParm( parm0: int, parm1: float ): void 
	+setShaderParms( parm0: float, parm1: float, parm2: float, parm3: float ): void 
	+setColor( parm0: float, parm1: float, parm2: float ): void 
	+getColor(): vector 
	+isHidden(): float 
	+hide(): void 
	+show(): void 
	+cacheSoundShader( parm0: string ): void 
	+startSoundShader( parm0: string, parm1: int ): float 
	+startSound( parm0: string, parm1: int, parm2: int ): float 
	+stopSound( parm0: int, parm1: int ): void 
	+fadeSound( parm0: int, parm1: float, parm2: float ): void 
	+getWorldOrigin(): vector 
	+setWorldOrigin( parm0: vector ): void 
	+getOrigin(): vector 
	+setOrigin( parm0: vector ): void 
	+getAngles(): vector 
	+setAngles( parm0: vector ): void 
	+getLinearVelocity(): vector 
	+setLinearVelocity( parm0: vector ): void 
	+getAngularVelocity(): vector 
	+setAngularVelocity( parm0: vector ): void 
	+getSize(): vector 
	+setSize( parm0: vector, parm1: vector ): void 
	+getMins(): vector 
	+getMaxs(): vector 
	+touches( parm0: entity ): float 
	+setGuiParm( parm0: string, parm1: string ): void 
	+setGuiFloat( parm0: string, parm1: float ): void 
	+getNextKey( parm0: string, parm1: string ): string 
	+setKey( parm0: string, parm1: string ): void 
	+getKey( parm0: string ): string 
	+getIntKey( parm0: string ): float 
	+getFloatKey( parm0: string ): float 
	+getVectorKey( parm0: string ): vector 
	+getEntityKey( parm0: string ): entity 
	+restorePosition(): void 
	+distanceTo( parm0: entity ): float 
	+distanceToPoint( parm0: vector ): float 
	+startFx( parm0: string ): void 
	+waitFrame(): void 
	+wait( parm0: float ): void 
	+hasFunction( parm0: string ): float 
	+callFunction( parm0: string ): void 
	+setNeverDormant( parm0: int ): void 
	+setGui( parm0: int, parm1: string ): void 
	+precacheGui( parm0: string ): void 
	+getGuiParm( parm0: int, parm1: string ): string 
	+getGuiParmFloat( parm0: int, parm1: string ): float 
	+guiNamedEvent( parm0: int, parm1: string ): void 

}

idEntity <|-- idWorldspawn
class idWorldspawn{
	+remove(): void 

}

idEntity <|-- idVacuumSeparatorEntity
class idVacuumSeparatorEntity{
	+activate( parm0: entity ): void 

}

idEntity <|-- idVacuumEntity
idEntity <|-- idTrigger
class idTrigger{
	+enable(): void 
	+disable(): void 

}

idTrigger <|-- idTrigger_Touch
class idTrigger_Touch{
	+activate( parm0: entity ): void 

}

idTrigger <|-- idTrigger_Timer
class idTrigger_Timer{
	+activate( parm0: entity ): void 

}

idTrigger <|-- idTrigger_Hurt
class idTrigger_Hurt{
	+activate( parm0: entity ): void 

}

idTrigger <|-- idTrigger_Multi
class idTrigger_Multi{
	+activate( parm0: entity ): void 

}

idTrigger_Multi <|-- idTrigger_Flag
idTrigger <|-- idTrigger_Fade
class idTrigger_Fade{
	+activate( parm0: entity ): void 

}

idTrigger <|-- idTrigger_EntityName
class idTrigger_EntityName{
	+activate( parm0: entity ): void 

}

idTrigger <|-- idTrigger_Count
class idTrigger_Count{
	+activate( parm0: entity ): void 

}

idEntity <|-- idTextEntity
idEntity <|-- idTarget
idTarget <|-- idTarget_WaitForButton
class idTarget_WaitForButton{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Tip
class idTarget_Tip{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Show
class idTarget_Show{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetShaderTime
class idTarget_SetShaderTime{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetShaderParm
class idTarget_SetShaderParm{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetPrimaryObjective
class idTarget_SetPrimaryObjective{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetModel
class idTarget_SetModel{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetKeyVal
class idTarget_SetKeyVal{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetInfluence
class idTarget_SetInfluence{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetGlobalShaderTime
class idTarget_SetGlobalShaderTime{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SetFov
class idTarget_SetFov{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_SessionCommand
class idTarget_SessionCommand{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_RumbleJoystick
class idTarget_RumbleJoystick{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_RemoveWeapons
class idTarget_RemoveWeapons{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Remove
class idTarget_Remove{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_LockDoor
class idTarget_LockDoor{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_LightFadeOut
class idTarget_LightFadeOut{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_LightFadeIn
class idTarget_LightFadeIn{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_LevelTrigger
class idTarget_LevelTrigger{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_GiveSecurity
class idTarget_GiveSecurity{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_GiveEmail
class idTarget_GiveEmail{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Give
class idTarget_Give{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_FadeSoundClass
class idTarget_FadeSoundClass{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_FadeEntity
class idTarget_FadeEntity{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_EndLevel
class idTarget_EndLevel{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_EnableStamina
class idTarget_EnableStamina{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_EnableLevelWeapons
class idTarget_EnableLevelWeapons{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Damage
class idTarget_Damage{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Checkpoint
class idTarget_Checkpoint{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_CallObjectFunction
class idTarget_CallObjectFunction{
	+activate( parm0: entity ): void 

}

idTarget <|-- idTarget_Achievement
class idTarget_Achievement{
	+activate( parm0: entity ): void 

}

idEntity <|-- idSpring
idEntity <|-- idSplinePath
idEntity <|-- idSpawnableEntity
idEntity <|-- idSound
class idSound{
	+activate( parm0: entity ): void 
	+On(): void 
	+Off(): void 

}

idEntity <|-- idShockwave
class idShockwave{
	+activate( parm0: entity ): void 

}

idEntity <|-- idShaking
class idShaking{
	+activate( parm0: entity ): void 

}

idEntity <|-- idSecurityCamera
idEntity <|-- idPortalSky
class idPortalSky{
	+activate( parm0: entity ): void 

}

idEntity <|-- idPlayerStart
class idPlayerStart{
	+activate( parm0: entity ): void 

}

idEntity <|-- idPhantomObjects
class idPhantomObjects{
	+activate( parm0: entity ): void 

}

idEntity <|-- idPathCorner
class idPathCorner{
	+randomPath(): entity 

}

idEntity <|-- idLocationSeparatorEntity
idEntity <|-- idLocationEntity
idEntity <|-- idLiquid
idEntity <|-- idLight
class idLight{
	+setShader( parm0: string ): void 
	+getLightParm( parm0: int ): float 
	+setLightParm( parm0: int, parm1: float ): void 
	+setLightParms( parm0: float, parm1: float, parm2: float, parm3: float ): void 
	+setRadiusXYZ( parm0: float, parm1: float, parm2: float ): void 
	+setRadius( parm0: float ): void 
	+hide(): void 
	+show(): void 
	+On(): void 
	+Off(): void 
	+activate( parm0: entity ): void 
	+fadeOutLight( parm0: float ): void 
	+fadeInLight( parm0: float ): void 

}

idEntity <|-- idItemRemover
class idItemRemover{
	+activate( parm0: entity ): void 

}

idItemRemover <|-- idObjectiveComplete
class idObjectiveComplete{
	+activate( parm0: entity ): void 

}

idEntity <|-- idItem
class idItem{
	+activate( parm0: entity ): void 
	+respawn(): void 

}

idItem <|-- idVideoCDItem
idItem <|-- idPDAItem
idItem <|-- idObjective
class idObjective{
	+activate( parm0: entity ): void 

}

idItem <|-- idMoveableItem
class idMoveableItem{
	+gib( parm0: string ): void 

}

idMoveableItem <|-- idMoveablePDAItem
idItem <|-- idItemTeam
class idItemTeam{
	+flagreturn( parm0: entity ): void 
	+takeflag( parm0: entity ): void 
	+dropflag( parm0: int ): void 
	+flagcapture(): void 

}

idItem <|-- idItemPowerup
idEntity <|-- idHarvestable
idEntity <|-- idGrabber
idEntity <|-- idFuncSmoke
class idFuncSmoke{
	+activate( parm0: entity ): void 

}

idEntity <|-- idFuncRadioChatter
class idFuncRadioChatter{
	+activate( parm0: entity ): void 

}

idEntity <|-- idFuncPortal
class idFuncPortal{
	+activate( parm0: entity ): void 

}

idEntity <|-- idFuncMountedObject
class idFuncMountedObject{
	+activate( parm0: entity ): void 

}

idFuncMountedObject <|-- idFuncMountedWeapon
idEntity <|-- idStaticEntity
class idStaticEntity{
	+activate( parm0: entity ): void 

}

idStaticEntity <|-- idFuncShootProjectile
class idFuncShootProjectile{
	+activate( parm0: entity ): void 

}

idStaticEntity <|-- idFuncEmitter
class idFuncEmitter{
	+activate( parm0: entity ): void 

}

idFuncEmitter <|-- idFuncSplat
class idFuncSplat{
	+activate( parm0: entity ): void 

}

idEntity <|-- idFuncAASPortal
class idFuncAASPortal{
	+activate( parm0: entity ): void 

}

idEntity <|-- idFuncAASObstacle
class idFuncAASObstacle{
	+activate( parm0: entity ): void 

}

idEntity <|-- idForceField
class idForceField{
	+activate( parm0: entity ): void 
	+Toggle(): void 

}

idEntity <|-- idExplodable
class idExplodable{
	+activate( parm0: entity ): void 

}

idEntity <|-- idEntityFx
class idEntityFx{
	+activate( parm0: entity ): void 

}

idEntityFx <|-- idTeleporter
idEntity <|-- idMover
class idMover{
	+stopMoving(): void 
	+stopRotating(): void 
	+speed( parm0: float ): void 
	+time( parm0: float ): void 
	+accelTime( parm0: float ): void 
	+decelTime( parm0: float ): void 
	+moveTo( parm0: entity ): void 
	+moveToPos( parm0: vector ): void 
	+move( parm0: float, parm1: float ): void 
	+accelTo( parm0: float, parm1: float ): void 
	+decelTo( parm0: float, parm1: float ): void 
	+rotateDownTo( parm0: int, parm1: float ): void 
	+rotateUpTo( parm0: int, parm1: float ): void 
	+rotateTo( parm0: vector ): void 
	+rotate( parm0: vector ): void 
	+rotateOnce( parm0: vector ): void 
	+bob( parm0: float, parm1: float, parm2: vector ): void 
	+sway( parm0: float, parm1: float, parm2: vector ): void 
	+openPortal(): void 
	+closePortal(): void 
	+accelSound( parm0: string ): void 
	+decelSound( parm0: string ): void 
	+moveSound( parm0: string ): void 
	+enableSplineAngles(): void 
	+disableSplineAngles(): void 
	+removeInitialSplineAngles(): void 
	+startSpline( parm0: entity ): void 
	+stopSpline(): void 
	+activate( parm0: entity ): void 
	+isMoving(): float 
	+isRotating(): float 

}

idMover <|-- idElevator
class idElevator{
	+activate( parm0: entity ): void 
	+postArrival(): void 
	+gotoFloor( parm0: int ): void 
	+setGuiStates(): void 

}

idEntity <|-- idEarthQuake
class idEarthQuake{
	+activate( parm0: entity ): void 

}

idEntity <|-- idMover_Binary
class idMover_Binary{
	+activate( parm0: entity ): void 
	+enable(): void 
	+disable(): void 
	+openPortal(): void 
	+closePortal(): void 

}

idMover_Binary <|-- idPlat
idMover_Binary <|-- idDoor
class idDoor{
	+activate( parm0: entity ): void 
	+open(): void 
	+close(): void 
	+lock( parm0: int ): void 
	+isOpen(): float 
	+isLocked(): float 
	+openPortal(): void 
	+closePortal(): void 

}

idEntity <|-- idDebris
idEntity <|-- idDamagable
class idDamagable{
	+activate( parm0: entity ): void 

}

idEntity <|-- idCursor3D
idEntity <|-- idCombatNode
class idCombatNode{
	+markUsed(): void 
	+activate( parm0: entity ): void 

}

idEntity <|-- idMultiModelAF
idMultiModelAF <|-- idChain
idEntity <|-- idCamera
idCamera <|-- idCameraView
class idCameraView{
	+activate( parm0: entity ): void 

}

idCamera <|-- idCameraAnim
class idCameraAnim{
	+stop(): void 
	+start(): void 
	+activate( parm0: entity ): void 

}

idEntity <|-- idBrittleFracture
class idBrittleFracture{
	+activate( parm0: entity ): void 

}

idEntity <|-- idMover_Periodic
idMover_Periodic <|-- idRotater
class idRotater{
	+activate( parm0: entity ): void 

}

idMover_Periodic <|-- idRiser
class idRiser{
	+activate( parm0: entity ): void 

}

idMover_Periodic <|-- idPendulum
idMover_Periodic <|-- idBobber
idEntity <|-- idBeam
class idBeam{
	+activate( parm0: entity ): void 

}

idEntity <|-- idMoveable
class idMoveable{
	+activate( parm0: entity ): void 
	+becomeNonSolid(): void 
	+isAtRest(): float 
	+enableDamage( parm0: float ): void 

}

idMoveable <|-- idBarrel
idBarrel <|-- idExplodingBarrel
class idExplodingBarrel{
	+activate( parm0: entity ): void 

}

idEntity <|-- idProjectile
class idProjectile{
	+getProjectileState(): float 
	+projectileCreateProjectile( parm0: entity, parm1: vector, parm2: vector ): void 
	+projectileLaunchProjectile( parm0: vector, parm1: vector, parm2: vector ): void 
	+setGravity( parm0: float ): void 

}

idProjectile <|-- idHomingProjectile
class idHomingProjectile{
	+setEnemy( parm0: entity ): void 

}

idProjectile <|-- idGuidedProjectile
class idGuidedProjectile{
	+setEnemy( parm0: entity ): void 

}

idGuidedProjectile <|-- idSoulCubeMissile
idProjectile <|-- idBFGProjectile
idEntity <|-- idActivator
class idActivator{
	+activate( parm0: entity ): void 

}

idEntity <|-- idAnimatedEntity
class idAnimatedEntity{
	+getJointHandle( parm0: string ): float 
	+clearAllJoints(): void 
	+clearJoint( parm0: int ): void 
	+setJointPos( parm0: int, parm1: int, parm2: vector ): void 
	+setJointAngle( parm0: int, parm1: int, parm2: vector ): void 
	+getJointPos( parm0: int ): vector 
	+getJointAngle( parm0: int ): vector 

}

idAnimatedEntity <|-- idWeapon
class idWeapon{
	+getOwner(): entity 
	+weaponState( parm0: string, parm1: int ): void 
	+weaponReady(): void 
	+weaponOutOfAmmo(): void 
	+weaponReloading(): void 
	+weaponHolstered(): void 
	+weaponRising(): void 
	+weaponLowering(): void 
	+useAmmo( parm0: int ): void 
	+addToClip( parm0: int ): void 
	+ammoInClip(): float 
	+ammoAvailable(): float 
	+totalAmmoCount(): float 
	+clipSize(): float 
	+playAnim( parm0: int, parm1: string ): float 
	+playCycle( parm0: int, parm1: string ): float 
	+setBlendFrames( parm0: int, parm1: int ): void 
	+getBlendFrames( parm0: int ): float 
	+animDone( parm0: int, parm1: int ): float 
	+nextWeapon(): void 
	+setSkin( parm0: string ): void 
	+flashlight( parm0: int ): void 
	+getLightParm( parm0: int ): float 
	+setLightParm( parm0: int, parm1: float ): void 
	+setLightParms( parm0: float, parm1: float, parm2: float, parm3: float ): void 
	+launchProjectiles( parm0: int, parm1: float, parm2: float, parm3: float, parm4: float ): void 
	+createProjectile(): entity 
	+ejectBrass(): void 
	+melee(): float 
	+getWorldModel(): entity 
	+allowDrop( parm0: int ): void 
	+autoReload(): float 
	+netReload(): void 
	+isInvisible(): float 
	+netEndReload(): void 
	+grabber( parm0: int ): void 
	+grabberHasTarget(): float 
	+grabberGrabDistance( parm0: float ): void 
	+launchProjectilesEllipse( parm0: int, parm1: float, parm2: float, parm3: float, parm4: float ): void 
	+launchPowerup( parm0: string, parm1: float, parm2: int ): void 
	+startWeaponSmoke(): void 
	+stopWeaponSmoke(): void 
	+startWeaponParticle( parm0: string ): void 
	+stopWeaponParticle( parm0: string ): void 
	+startWeaponLight( parm0: string ): void 
	+stopWeaponLight( parm0: string ): void 

}

idAnimatedEntity <|-- idTestModel
class idTestModel{
	+leftFoot(): void 
	+rightFoot(): void 

}

idAnimatedEntity <|-- idAFEntity_Base
class idAFEntity_Base{
	+SetConstraintPosition( parm0: string, parm1: vector ): void 

}

idAFEntity_Base <|-- idAFEntity_Vehicle
idAFEntity_Vehicle <|-- idAFEntity_VehicleSimple
idAFEntity_Vehicle <|-- idAFEntity_VehicleFourWheels
idAFEntity_Vehicle <|-- idAFEntity_VehicleSixWheels
idAFEntity_VehicleSixWheels <|-- idAFEntity_VehicleAutomated
class idAFEntity_VehicleAutomated{
	+setVelocity( parm0: float ): void 
	+setTorque( parm0: float ): void 
	+setSteeringSpeed( parm0: float ): void 
	+setWaypoint( parm0: entity ): void 

}

idAFEntity_Base <|-- idAFEntity_SteamPipe
idAFEntity_Base <|-- idAFEntity_Gibbable
class idAFEntity_Gibbable{
	+gib( parm0: string ): void 

}

idAFEntity_Gibbable <|-- idAnimated
class idAnimated{
	+activate( parm0: entity ): void 
	+startRagdoll(): void 
	+footstep(): void 
	+leftFoot(): void 
	+rightFoot(): void 
	+launchMissiles( parm0: string, parm1: string, parm2: string, parm3: string, parm4: int, parm5: float ): void 
	+setAnimation( parm0: string ): void 
	+getAnimationLength(): float 

}

idAFEntity_Gibbable <|-- idActor
class idActor{
	+enableEyeFocus(): void 
	+disableEyeFocus(): void 
	+footstep(): void 
	+leftFoot(): void 
	+rightFoot(): void 
	+EnableWalkIK(): void 
	+DisableWalkIK(): void 
	+EnableLegIK( parm0: int ): void 
	+DisableLegIK( parm0: int ): void 
	+preventPain( parm0: float ): void 
	+disablePain(): void 
	+enablePain(): void 
	+getPainAnim(): string 
	+setAnimPrefix( parm0: string ): void 
	+stopAnim( parm0: int, parm1: int ): void 
	+playAnim( parm0: int, parm1: string ): float 
	+playCycle( parm0: int, parm1: string ): float 
	+idleAnim( parm0: int, parm1: string ): float 
	+setSyncedAnimWeight( parm0: int, parm1: int, parm2: float ): void 
	+setBlendFrames( parm0: int, parm1: int ): void 
	+getBlendFrames( parm0: int ): float 
	+animState( parm0: int, parm1: string, parm2: int ): void 
	+getAnimState( parm0: int ): string 
	+inAnimState( parm0: int, parm1: string ): float 
	+finishAction( parm0: string ): void 
	+animDone( parm0: int, parm1: int ): float 
	+overrideAnim( parm0: int ): void 
	+enableAnim( parm0: int, parm1: int ): void 
	+hasAnim( parm0: int, parm1: string ): float 
	+checkAnim( parm0: int, parm1: string ): void 
	+chooseAnim( parm0: int, parm1: string ): string 
	+animLength( parm0: int, parm1: string ): float 
	+animDistance( parm0: int, parm1: string ): float 
	+hasEnemies(): float 
	+nextEnemy( parm0: entity ): entity 
	+closestEnemyToPoint( parm0: vector ): entity 
	+stopSound( parm0: int, parm1: int ): void 
	+setNextState( parm0: string ): void 
	+setState( parm0: string ): void 
	+getState(): string 
	+getHead(): entity 
	+setDamageGroupScale( parm0: string, parm1: float ): void 
	+setDamageGroupScaleAll( parm0: float ): void 
	+getDamageGroupScale( parm0: string ): float 
	+setDamageCap( parm0: float ): void 
	+setWaitState( parm0: string ): void 
	+getWaitState(): string 

}

idActor <|-- idPlayer
class idPlayer{
	+getButtons(): float 
	+getMove(): vector 
	+getViewAngles(): vector 
	+stopFxFov(): void 
	+enableWeapon(): void 
	+disableWeapon(): void 
	+getCurrentWeapon(): string 
	+getPreviousWeapon(): string 
	+selectWeapon( parm0: string ): void 
	+getWeaponEntity(): entity 
	+openPDA(): void 
	+inPDA(): float 
	+exitTeleporter(): void 
	+stopAudioLog(): void 
	+hideTip(): void 
	+levelTrigger(): void 
	+giveInventoryItem( parm0: string ): void 
	+removeInventoryItem( parm0: string ): void 
	+getIdealWeapon(): string 
	+weaponAvailable( parm0: string ): float 
	+setPowerupTime( parm0: int, parm1: int ): void 
	+isPowerupActive( parm0: int ): float 
	+startWarp(): void 
	+stopHelltime( parm0: int ): void 
	+toggleBloom( parm0: int ): void 
	+setBloomParms( parm0: float, parm1: float ): void 

}

idActor <|-- idAI
class idAI{
	+activate( parm0: entity ): void 
	+findEnemy( parm0: int ): entity 
	+findEnemyAI( parm0: int ): entity 
	+findEnemyInCombatNodes(): entity 
	+closestReachableEnemyOfEntity( parm0: entity ): entity 
	+heardSound( parm0: int ): entity 
	+setEnemy( parm0: entity ): void 
	+clearEnemy(): void 
	+muzzleFlash( parm0: string ): void 
	+createMissile( parm0: string ): entity 
	+attackMissile( parm0: string ): entity 
	+fireMissileAtTarget( parm0: string, parm1: string ): entity 
	+launchMissile( parm0: vector, parm1: vector ): entity 
	+launchHomingMissile(): void 
	+setHomingMissileGoal(): void 
	+launchProjectile( parm0: string ): void 
	+attackMelee( parm0: string ): float 
	+directDamage( parm0: entity, parm1: string ): void 
	+radiusDamageFromJoint( parm0: string, parm1: string ): void 
	+attackBegin( parm0: string ): void 
	+attackEnd(): void 
	+meleeAttackToJoint( parm0: string, parm1: string ): float 
	+randomPath(): entity 
	+canBecomeSolid(): float 
	+becomeSolid(): void 
	+becomeNonSolid(): void 
	+becomeRagdoll(): float 
	+stopRagdoll(): void 
	+setHealth( parm0: float ): void 
	+getHealth(): float 
	+allowDamage(): void 
	+ignoreDamage(): void 
	+getCurrentYaw(): float 
	+turnTo( parm0: float ): void 
	+turnToPos( parm0: vector ): void 
	+turnToEntity( parm0: entity ): void 
	+moveStatus(): float 
	+stopMove(): void 
	+moveToCover(): void 
	+moveToEnemy(): void 
	+moveToEnemyHeight(): void 
	+moveOutOfRange( parm0: entity, parm1: float ): void 
	+moveToAttackPosition( parm0: entity, parm1: string ): void 
	+wander(): void 
	+moveToEntity( parm0: entity ): void 
	+moveToPosition( parm0: vector ): void 
	+slideTo( parm0: vector, parm1: float ): void 
	+facingIdeal(): float 
	+faceEnemy(): void 
	+faceEntity( parm0: entity ): void 
	+waitAction( parm0: string ): void 
	+getCombatNode(): entity 
	+enemyInCombatCone( parm0: entity, parm1: int ): float 
	+waitMove(): void 
	+getJumpVelocity( parm0: vector, parm1: float, parm2: float ): vector 
	+getTrajectoryToPlayer(): vector 
	+entityInAttackCone( parm0: entity ): float 
	+canSee( parm0: entity ): float 
	+setTalkTarget( parm0: entity ): void 
	+getTalkTarget(): entity 
	+setTalkState( parm0: int ): void 
	+enemyRange(): float 
	+enemyRange2D(): float 
	+getEnemy(): entity 
	+getEnemyPos(): vector 
	+getEnemyEyePos(): vector 
	+predictEnemyPos( parm0: float ): vector 
	+canHitEnemy(): float 
	+canHitEnemyFromAnim( parm0: string ): float 
	+canHitEnemyFromJoint( parm0: string ): float 
	+enemyPositionValid(): float 
	+chargeAttack( parm0: string ): void 
	+testChargeAttack(): float 
	+testAnimMoveTowardEnemy( parm0: string ): float 
	+testAnimMove( parm0: string ): float 
	+testMoveToPosition( parm0: vector ): float 
	+testMeleeAttack(): float 
	+testAnimAttack( parm0: string ): float 
	+shrivel( parm0: float ): void 
	+burn(): void 
	+preBurn(): void 
	+setSmokeVisibility( parm0: int, parm1: int ): void 
	+numSmokeEmitters(): float 
	+clearBurn(): void 
	+stopThinking(): void 
	+getTurnDelta(): float 
	+getMoveType(): float 
	+setMoveType( parm0: int ): void 
	+saveMove(): void 
	+restoreMove(): void 
	+allowMovement( parm0: float ): void 
	+enableClip(): void 
	+disableClip(): void 
	+enableGravity(): void 
	+disableGravity(): void 
	+enableAFPush(): void 
	+disableAFPush(): void 
	+setFlySpeed( parm0: float ): void 
	+setFlyOffset( parm0: int ): void 
	+clearFlyOffset(): void 
	+getClosestHiddenTarget( parm0: string ): entity 
	+getRandomTarget( parm0: string ): entity 
	+travelDistanceToPoint( parm0: vector ): float 
	+travelDistanceToEntity( parm0: entity ): float 
	+travelDistanceBetweenPoints( parm0: vector, parm1: vector ): float 
	+travelDistanceBetweenEntities( parm0: entity, parm1: entity ): float 
	+lookAt( parm0: entity, parm1: float ): void 
	+lookAtEnemy( parm0: float ): void 
	+setBoneMod( parm0: int ): void 
	+throwMoveable(): void 
	+throwAF(): void 
	+getAngles(): vector 
	+setAngles( parm0: vector ): void 
	+kill(): void 
	+wakeOnFlashlight( parm0: int ): void 
	+locateEnemy(): void 
	+kickObstacles( parm0: entity, parm1: float ): void 
	+getObstacle(): entity 
	+pushPointIntoAAS( parm0: vector ): vector 
	+getTurnRate(): float 
	+setTurnRate( parm0: float ): void 
	+animTurn( parm0: float ): void 
	+allowHiddenMovement( parm0: int ): void 
	+triggerParticles( parm0: string ): void 
	+findActorsInBounds( parm0: vector, parm1: vector ): entity 
	+canReachPosition( parm0: vector ): float 
	+canReachEntity( parm0: entity ): float 
	+canReachEnemy(): float 
	+getReachableEntityPosition( parm0: entity ): vector 
	+moveToPositionDirect( parm0: vector ): void 
	+avoidObstacles( parm0: int ): void 
	+triggerFX( parm0: string, parm1: string ): void 
	+startEmitter( parm0: string, parm1: string, parm2: string ): entity 
	+getEmitter( parm0: string ): entity 
	+stopEmitter( parm0: string ): void 

}

idAI <|-- idAI_Vagary
class idAI_Vagary{
	+vagary_ChooseObjectToThrow( parm0: vector, parm1: vector, parm2: float, parm3: float, parm4: float ): entity 
	+vagary_ThrowObjectAtEnemy( parm0: entity, parm1: float ): void 

}

idAFEntity_Gibbable <|-- idAFEntity_WithAttachedHead
class idAFEntity_WithAttachedHead{
	+gib( parm0: string ): void 
	+activate( parm0: entity ): void 

}

idAFEntity_WithAttachedHead <|-- idAFEntity_Harvest
idAFEntity_Gibbable <|-- idAFEntity_Generic
class idAFEntity_Generic{
	+activate( parm0: entity ): void 

}

idAFEntity_Base <|-- idAFEntity_ClawFourFingers
class idAFEntity_ClawFourFingers{
	+setFingerAngle( parm0: float ): void 
	+stopFingers(): void 

}

idAnimatedEntity <|-- idAFAttachment
idEntity <|-- EnvironmentProbe
class EnvironmentProbe{
	+getEnvprobeParm( parm0: int ): float 
	+setEnvprobeParm( parm0: int, parm1: float ): void 
	+setEnvprobeParms( parm0: float, parm1: float, parm2: float, parm3: float ): void 
	+hide(): void 
	+show(): void 
	+On(): void 
	+Off(): void 
	+activate( parm0: entity ): void 
	+fadeOutEnvprobe( parm0: float ): void 
	+fadeInEnvprobe( parm0: float ): void 

}


